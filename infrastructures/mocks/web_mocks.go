// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructures/web.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mux "github.com/gorilla/mux"
	http "net/http"
	reflect "reflect"
)

// MockRouter is a mock of Router interface
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// HandleFunc mocks base method
func (m *MockRouter) HandleFunc(path string, f func(http.ResponseWriter, *http.Request)) *mux.Route {
	ret := m.ctrl.Call(m, "HandleFunc", path, f)
	ret0, _ := ret[0].(*mux.Route)
	return ret0
}

// HandleFunc indicates an expected call of HandleFunc
func (mr *MockRouterMockRecorder) HandleFunc(path, f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFunc", reflect.TypeOf((*MockRouter)(nil).HandleFunc), path, f)
}

// ServeHTTP mocks base method
func (m *MockRouter) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockRouterMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockRouter)(nil).ServeHTTP), arg0, arg1)
}
