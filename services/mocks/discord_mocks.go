// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kkragenbrink/slate/services (interfaces: DiscordSession)

// Package mocks is a generated GoMock package.
package mocks

import (
	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDiscordSession is a mock of DiscordSession interface
type MockDiscordSession struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordSessionMockRecorder
}

// MockDiscordSessionMockRecorder is the mock recorder for MockDiscordSession
type MockDiscordSessionMockRecorder struct {
	mock *MockDiscordSession
}

// NewMockDiscordSession creates a new mock instance
func NewMockDiscordSession(ctrl *gomock.Controller) *MockDiscordSession {
	mock := &MockDiscordSession{ctrl: ctrl}
	mock.recorder = &MockDiscordSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscordSession) EXPECT() *MockDiscordSessionMockRecorder {
	return m.recorder
}

// AddHandler mocks base method
func (m *MockDiscordSession) AddHandler(arg0 interface{}) func() {
	ret := m.ctrl.Call(m, "AddHandler", arg0)
	ret0, _ := ret[0].(func())
	return ret0
}

// AddHandler indicates an expected call of AddHandler
func (mr *MockDiscordSessionMockRecorder) AddHandler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockDiscordSession)(nil).AddHandler), arg0)
}

// Channel mocks base method
func (m *MockDiscordSession) Channel(arg0 string) (*discordgo.Channel, error) {
	ret := m.ctrl.Call(m, "Channel", arg0)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel
func (mr *MockDiscordSessionMockRecorder) Channel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockDiscordSession)(nil).Channel), arg0)
}

// ChannelMessageSend mocks base method
func (m *MockDiscordSession) ChannelMessageSend(arg0, arg1 string) (*discordgo.Message, error) {
	ret := m.ctrl.Call(m, "ChannelMessageSend", arg0, arg1)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend
func (mr *MockDiscordSessionMockRecorder) ChannelMessageSend(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockDiscordSession)(nil).ChannelMessageSend), arg0, arg1)
}

// Close mocks base method
func (m *MockDiscordSession) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDiscordSessionMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDiscordSession)(nil).Close))
}

// GuildChannels mocks base method
func (m *MockDiscordSession) GuildChannels(arg0 string) ([]*discordgo.Channel, error) {
	ret := m.ctrl.Call(m, "GuildChannels", arg0)
	ret0, _ := ret[0].([]*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannels indicates an expected call of GuildChannels
func (mr *MockDiscordSessionMockRecorder) GuildChannels(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannels", reflect.TypeOf((*MockDiscordSession)(nil).GuildChannels), arg0)
}

// Open mocks base method
func (m *MockDiscordSession) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockDiscordSessionMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDiscordSession)(nil).Open))
}

// User mocks base method
func (m *MockDiscordSession) User(arg0 string) (*discordgo.User, error) {
	ret := m.ctrl.Call(m, "User", arg0)
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *MockDiscordSessionMockRecorder) User(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockDiscordSession)(nil).User), arg0)
}
